# -*- coding: utf-8 -*-
"""diabetes_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MnXFckzIots8Zb1VMgpZ_vHEioN8BlsJ

importing libraries

# New Section
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data:
PIMA diabetes dataset

"""

#lets load our dataset
df = pd.read_csv('diabetes.csv')
#staistical measures of our data
df.describe()

"""

```
 printing first 5 rows for analyzing
```

"""

df.head()

"""strucutre of dataset

> Add blockquote


"""

#lets find dimensions of our data set i.e, no fo rows and coloumns
df.shape

df['Outcome'].value_counts()

"""from above we have to remember that
0-----> Non-Diabrtic
1-----> Diabetic
"""

#lets configure mean of all measures for both non diabetic and diabetic patients
#for diabetic patients
print("Mean for diabetic patients")
print(df[df['Outcome']==1].mean())
print(' ')
print("Mean for non diabetic patients")
df[df['Outcome']==0].mean()

"""now let us seperate our data and labels"""

x=df.drop(columns='Outcome',axis=1)
y=df['Outcome']
print(x)
print(y)

"""DATA STANDARDIZATION"""

scale=StandardScaler()
scale.fit(x)
standardized_data=scale.transform(x)
print(standardized_data)

"""now let x be our standaridzed data"""

x=standardized_data
y=df['Outcome']
print(x)
print(y)

"""now let us split our data into training and test"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,stratify=y,random_state=2)
print("dimensions of orginal data",x.shape)
print("dimensions of training data",x_train.shape)
print("dimensions of testing data",x_test.shape)

"""now let us train our model using svm classifer"""

cls=svm.SVC(kernel='linear')
cls.fit(x_train,y_train)

"""accuracy score"""

#accuracy score on trianing data
x_train_prediction=cls.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)
print("accuracy score of training data",training_data_accuracy)

#accuracy score on testing data
x_test_prediction=cls.predict(x_test)
testing_data_accuracy=accuracy_score(x_test_prediction,y_test)
print("accuracy score of testing data",testing_data_accuracy)

"""now let's make our system"""

input_data=(5,166,72,19,175,25.8,0.587,51)
#changing input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
#standardize the input data
std_data=scale.transform(input_data_reshaped)
print(std_data)
prediction=cls.predict(std_data)
print(prediction)
if(prediction[0]==0):
  print(" The person is Non-Diabetic")
else:
  print(" The person is Diabetic")

